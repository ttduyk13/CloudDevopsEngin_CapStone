version: 2.1

commands:
  install-awscli:
    steps:
      - run:
          name: Install awscli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
  install-kubectl:
    steps:
      - run:
          name: Install kubectl
          command: |
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.26.8/2023-09-14/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
            echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
            kubectl version --short --client
  install-hadolint:
    steps:
      - run:
          name: Install hadolint
          command: |
            curl -O https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
            chmod +x hadolint-Linux-x86_64
            mkdir -p $HOME/bin && cp hadolint-Linux-x86_64 $HOME/bin/hadolint && export PATH=$HOME/bin:$PATH
            echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
            hadolint --version
  install-eksctl:
    steps:
      - run:
          name: Install eksctl
          command: |
            ARCH=amd64
            PLATFORM=$(uname -s)_$ARCH
            curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
            tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
            sudo mv /tmp/eksctl /usr/local/bin
  setup-venv:
    steps:
      - run:
          name: Setup venv
          command: |
            make setup
  access-venv:
    steps:
      - run:
          name: Access venv
          command: |
            . ~/.devops/bin/activate

jobs:
  test-build:
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout
      - restore_cache:
          key: v1-python-cache-{{ checksum "requirements.txt" }}
      - setup-venv
      - access-venv
      - install-hadolint
      - run:
          name: install
          command: |
            make install 
            export AHIHI="ahoho"
            echo $AHIHI
      - run:
          name: lint and test check
          command: |
            echo $AHIHI
            make lint
      - save_cache:
          paths: [~/.devops]
          key: v1-python-cache-{{ checksum "requirements.txt" }}
      - store_test_results:
          path: test-results

  setup-cluster:
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout
      - install-awscli
      - install-kubectl
      - install-eksctl
      - run:
          name: Setup eks
          command: |
            export CLUSTER_NAME="DuyTT10-capstone-cluster"
            echo "cluster name: ${CLUSTER_NAME}"
            cluster_info=$(aws eks describe-cluster --name $CLUSTER_NAME --region us-east-1  2>&1 | grep -i -w "ResourceNotFoundException") || true

            if [[ $cluster_info ]]; then
                echo "The cluster $CLUSTER_NAME does not exist"
                eksctl create cluster -f .circleci/cluster/cluster.yml
                kubectl get nodes
            else
                echo "The cluster $CLUSTER_NAME exists"  
            fi

            export KUBECONFIG="${KUBECONFIG}:${HOME}/.kube/config"
            echo $KUBECONFIG

            ls ~/.kube
            export KUBECONFIG_CLUSTER=~/.kube/${CLUSTER_NAME}
            echo $KUBECONFIG_CLUSTER

  build-docker:
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout
      - install-awscli
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - run:
          name: docker with aws ecr
          command: |
            echo "current docker image tag: ${CIRCLE_WORKFLOW_ID:0:7}"
            bash upload_docker.sh ${CIRCLE_WORKFLOW_ID:0:7}

  deploy:
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout
      - install-kubectl
      - run:
          name: 

          command: |
            DEPLOYMENT_NAME="duytt10-capstone-deployment"

            # Create config map for image tag
            kubectl get nodes
            kubectl create configmap duytt10-capstone-config --from-literal=IMAGE_TAG=${CIRCLE_WORKFLOW_ID:0:7}

            kubectl apply -f ./.circleci/cluster/deployment.yml

            kubectl describe pod

            kubectl delete deployment $DEPLOYMENT_NAME

            

# Invoke jobs via workflows
# See: https://circleci.com/docs/configuration-reference/#workflows

workflows:
  default:
    jobs:
      - setup-cluster
      - test-build
      - build-docker:
          requires: [setup-cluster, test-build]
          filters:
            branches:
              only: main
      - deploy:
          requires: [build-docker]
          filters:
            branches:
              only: main
