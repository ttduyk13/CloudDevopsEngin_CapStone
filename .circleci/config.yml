version: 2.1

commands:
  install-awscli:
    steps:
      - run:
          name: Install awscli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
  install-kubectl:
    steps:
      - run:
          name: Install kubectl
          command: |
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.26.8/2023-09-14/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
            echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
            kubectl version --short --client
  install-hadolint:
    steps:
      - run:
          name: Install hadolint
          command: |
            curl -O https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
            chmod +x hadolint-Linux-x86_64
            mkdir -p $HOME/bin && cp hadolint-Linux-x86_64 $HOME/bin/hadolint && export PATH=$HOME/bin:$PATH
            echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
            hadolint --version
  install-eksctl:
    steps:
      - run:
          name: Install eksctl
          command: |
            ARCH=amd64
            PLATFORM=$(uname -s)_$ARCH
            curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
            tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
            sudo mv /tmp/eksctl /usr/local/bin
  setup-venv:
    steps:
      - run:
          name: Setup venv
          command: |
            make setup
  access-venv:
    steps:
      - run:
          name: Access venv
          command: |
            . ~/.devops/bin/activate

jobs:
  test-build:
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout
      - restore_cache:
          key: v1-python-cache-{{ checksum "requirements.txt" }}
      - setup-venv
      - access-venv
      - install-hadolint
      - run:
          name: install
          command: |
            make install
      - run:
          name: lint and test check
          command: |
            make lint
      - save_cache:
          paths: [~/.devops]
          key: v1-python-cache-{{ checksum "requirements.txt" }}

  setup-cluster:
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout
      - install-awscli
      - install-kubectl
      - install-eksctl
      - run:
          name: Setup eks
          command: |
            export CLUSTER_NAME="duytt10-capstone-cluster"
            export REGION="us-east-1"
            echo "cluster name: ${CLUSTER_NAME}"
            cluster_info=$(aws eks describe-cluster --name $CLUSTER_NAME --region $REGION  2>&1 | grep -i -w "ResourceNotFoundException") || true

            if [[ $cluster_info ]]; then
                echo "The cluster $CLUSTER_NAME does not exist"
                eksctl create cluster -f .circleci/cluster/cluster.yml
                kubectl get nodes -v6

                export BUCKET_NAME="duytt10-capstone"
                bucket_info=$(aws s3api head-bucket --bucket $BUCKET_NAME  2>&1 | grep -i -w "404") || true
                if [[ $bucket_info ]]; then
                  echo "Bucket $BUCKET_NAME doesn't exist"
                  aws s3api create-bucket --bucket $BUCKET_NAME --region $REGION
                else
                  echo "Bucket $BUCKET_NAME exists"
                fi

                if test -f ~/.kube/config; then
                  aws s3 cp ~/.kube/config s3://$BUCKET_NAME/.kube/config
                else
                  exit 1;
                fi

            else
                echo "The cluster $CLUSTER_NAME exists"
            fi

  build-docker:
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout
      - install-awscli
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - run:
          name: docker with aws ecr
          command: |
            echo "current docker image tag: ${CIRCLE_WORKFLOW_ID:0:7}"
            bash upload_docker.sh ${CIRCLE_WORKFLOW_ID:0:7}

  deploy:
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout
      - install-awscli
      - install-kubectl
      - run:
          name: persist config
          command: |
            export BUCKET_NAME="duytt10-capstone"
            aws s3 cp s3://$BUCKET_NAME/.kube/config ~/.kube/config
            export KUBECONFIG="${KUBECONFIG}:~/.kube/config"
      - run:
          name: deploy app
          command: |
            DEPLOYMENT_NAME="duytt10-capstone-deployment"
            SERVICE_NAME="duytt10-capstone-service"

            # Create config map for image tag
            kubectl get nodes

            # export CONFIGMAP_NAME="duytt10-capstone-config"
            # configmap_info=$(kubectl describe configmap $CONFIGMAP_NAME  2>&1 | grep -i -w "NotFound") || true
            # if [[ $configmap_info ]]; then
            #   echo "Configmap $CONFIGMAP_NAME doesn't exist"
            #   kubectl create configmap $CONFIGMAP_NAME --from-literal=IMAGE_TAG=${CIRCLE_WORKFLOW_ID:0:7}
            # else
            #   printf "Update configmap $CONFIGMAP_NAME"
            #   kubectl patch configmap duytt10-capstone-config --patch='{"data": {"IMAGE_TAG": "'"${CIRCLE_WORKFLOW_ID:0:7}"'"}}'
            # fi

            printf "Apply deployment\n"
            kubectl apply -f ./.circleci/cluster/deployment.yml

            printf "Apply service\n"
            kubectl apply -f ./.circleci/cluster/service.yml

            kubectl get deployment $DEPLOYMENT_NAME
            kubectl get service $SERVICE_NAME

            printf "Get loadbalancer url\n"
            kubectl get services $SERVICE_NAME -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' > url.txt
            cat url.txt
            printf "\n---\n"

            kubectl set image deployments/duytt10-capstone-deployment duytt10-capstone=041996649308.dkr.ecr.us-east-1.amazonaws.com/duytt10-clouddevopsengin-capstone:${CIRCLE_WORKFLOW_ID:0:7}

            kubectl rollout status deployments/duytt10-capstone-deployment
            kubectl get pods
      - run:
          name: smoke test
          command: |
            URL=$(cat url.txt)
            PORT=80
            ENDPOINT="${URL}:${PORT}/predict"
            echo "Endpoint: ${ENDPOINT}"
            RES=$(bash make_prediction.sh $URL $PORT | grep -i -P '200|"prediction": ')

            if [[ $RES ]]; then
              printf "Successful POST request"
              
              pod_names=$(kubectl get pods -o jsonpath='{.items[*].metadata.name}')

              # Loop through the pod names
              for pod_name in $pod_names; do
                  kubectl logs $pod_name -c duytt10-capstone
              done

              exit 0;
            else
              printf "failed to make a POST request to ${ENDPOINT}"
              exit 1;
            fi
        

# Invoke jobs via workflows
# See: https://circleci.com/docs/configuration-reference/#workflows

workflows:
  default:
    jobs:
      - setup-cluster
      - test-build
      - build-docker:
          requires: [setup-cluster, test-build]
          filters:
            branches:
              only: main
      - deploy:
          requires: [build-docker]
          filters:
            branches:
              only: main
